require "ipaddr"
require "net/http"

IMAGE_NAME = "bento/ubuntu-23.10"
APT_MIRROR = ENV["APT_MIRROR"]
IGNORE_MIRRORS = Set.new([
    # mirror not to be used                                  # reason why not to be used
    #     (copy from http://mirrors.ubuntu.com/mirrors.txt)  #
    "https://mirror.nishi.network/ubuntu-ports/",            # does not support amd64
])

if APT_MIRROR.nil? || APT_MIRROR.empty? then
    begin
        resp = Net::HTTP.get("mirrors.ubuntu.com", "/mirrors.txt")
        APT_MIRROR = resp.split().select{|m| !(IGNORE_MIRRORS.include? m)}[0]
        p "for APT, use mirror (auto selected) : #{APT_MIRROR}"
    rescue
        APT_MIRROR = ""
    end
end

if APT_MIRROR.nil? || APT_MIRROR.empty? then
    APT_MIRROR = "http://in.archive.ubuntu.com/ubuntu"
end

N = 1
KNIT_NODE_SUBNET = ENV["KNIT_DEVCLUSTER_SUBNET"] || "10.10.0.0/16"  # let not overwrap with calico.
KNIT_POD_SUBNET = "192.168.0.0/16"  # calico's CIDR.

kube_node = IPAddr.new(KNIT_NODE_SUBNET)
while (kube_node & 0x00_00_00_ff).to_i <= 1 do
    kube_node = kube_node.succ
end
master_node = kube_node
nfs_node = gateway_node = kube_node = kube_node.succ
worker_node = kube_node.succ

SYNC_KUBEADM = "/home/vagrant/kubeadm-generated"
SYNC_KUBEADM_HOST = "./.sync/kubeadm"

SYNC_KUBECONFIG = "/home/vagrant/public-kubeconfig"
SYNC_KUBECONFIG_HOST = "./.sync/kubeconfig"

NFS_EXPORT_ROOT         = "/exports"

SYNC_DOCKER_CERTS = "/etc/containerd/certs.d"
SYNC_DOCKER_CERTS_HOST = "#{__dir__}/.sync/docker-certs"

SYNC_CA_CERTS = "/home/vagrant/certs"
SYNC_CA_CERTS_HOST = "#{__dir__}/.sync/certs"

SYNC_KNIT_CONFIG = "/home/vagrant/knit"
SYNC_KNIT_CONFIG_HOST = "#{__dir__}/.sync/knit"

Vagrant.configure("2") do |config|
    config.ssh.insert_key = false

    config.vm.provider "virtualbox" do |v|
        v.memory = 2048
        v.cpus = 2
    end

    # the Control Plane of k8s.
    master_node_name = "knit-master"
    config.vm.define master_node_name do |master|

        node_ip = master_node.to_s
        master.vm.box = IMAGE_NAME

        master.vm.network "private_network", ip: node_ip
        master.vm.hostname = master_node_name
        master.vm.synced_folder SYNC_KUBEADM_HOST,     SYNC_KUBEADM,     create:"true"
        master.vm.synced_folder SYNC_KUBECONFIG_HOST,  SYNC_KUBECONFIG,  create:"true"
        master.vm.synced_folder SYNC_CA_CERTS_HOST,    SYNC_CA_CERTS,    create:"true"
        master.vm.synced_folder SYNC_KNIT_CONFIG_HOST, SYNC_KNIT_CONFIG, create:"true"
        is_nfs = master_node == nfs_node
        master.vm.provision "ansible" do |ansible|
            ansible.compatibility_mode = "2.0"
            ansible.playbook = "playbooks/master-playbook.yml"
            ansible.extra_vars = {
                apt_mirror: APT_MIRROR,
                node_name: master_node_name,
                node_ip: node_ip,
                gateway_ip: gateway_node.to_s,
                share_kubeadm: SYNC_KUBEADM,
                share_kubeconfig: SYNC_KUBECONFIG,
                knit_config: SYNC_KNIT_CONFIG,

                # NFS related.
                is_nfs: is_nfs,
                nfs_export_root: NFS_EXPORT_ROOT,
                pod_subnet: KNIT_POD_SUBNET,
                node_subnet: KNIT_NODE_SUBNET,
            }
        end
    end

    # Node where the knit reverse proxy deploy on.
    gateway_node_name = "knit-gateway"
    config.vm.define gateway_node_name do |gateway|
        node_ip = gateway_node.to_s

        gateway.vm.box = IMAGE_NAME
        gateway.vm.network "private_network", ip: node_ip
        gateway.vm.hostname = gateway_node_name
        gateway.vm.synced_folder SYNC_KUBEADM_HOST,     SYNC_KUBEADM,     create:"true"
        gateway.vm.synced_folder SYNC_CA_CERTS_HOST,    SYNC_CA_CERTS,    create:"true"
        gateway.vm.synced_folder SYNC_KNIT_CONFIG_HOST, SYNC_KNIT_CONFIG, create:"true"
        is_nfs = gateway_node == nfs_node
        gateway.vm.provision "ansible" do |ansible|
            ansible.playbook = "playbooks/gateway-playbook.yml"
            ansible.extra_vars = {
                apt_mirror: APT_MIRROR,
                node_name: gateway_node_name,
                node_ip: node_ip,
                gateway_ip: gateway_node.to_s,
                share_kubeadm: SYNC_KUBEADM,
                ca_certs_dir: SYNC_CA_CERTS,
                ca_certs_dir_in_host: SYNC_CA_CERTS_HOST,
                knit_config: SYNC_KNIT_CONFIG,

                # NFS related.
                is_nfs: is_nfs,
                nfs_export_root: NFS_EXPORT_ROOT,
                pod_subnet: KNIT_POD_SUBNET,
                node_subnet: KNIT_NODE_SUBNET,
            }
        end
    end

    # general worker nodes.
    (1..N).each do |i|
        node_name = "knit-node-#{i}"
        config.vm.define node_name do |node|
            node_ip = worker_node.to_s
            node.vm.box = IMAGE_NAME
            node.vm.network "private_network", ip: node_ip
            node.vm.hostname = node_name

            node.vm.synced_folder SYNC_KUBEADM_HOST,     SYNC_KUBEADM,     create:"true"
            node.vm.synced_folder SYNC_CA_CERTS_HOST,    SYNC_CA_CERTS,    create:"true"
            node.vm.synced_folder SYNC_KNIT_CONFIG_HOST, SYNC_KNIT_CONFIG, create:"true"
            is_nfs = worker_node == nfs_node
            node.vm.provision "ansible" do |ansible|
                ansible.playbook = "playbooks/node-playbook.yml"
                ansible.extra_vars = {
                    apt_mirror: APT_MIRROR,
                    node_name: node_name,
                    node_ip: node_ip,
                    gateway_ip: gateway_node.to_s,
                    share_kubeadm: SYNC_KUBEADM,
                    ca_certs_dir: SYNC_CA_CERTS,
                    knit_config: SYNC_KNIT_CONFIG,

                    # NFS related.
                    is_nfs: is_nfs,
                    nfs_export_root: NFS_EXPORT_ROOT,
                    pod_subnet: KNIT_POD_SUBNET,
                    node_subnet: KNIT_NODE_SUBNET,
                }

            worker_node = worker_node.succ
            end
        end
    end
end
